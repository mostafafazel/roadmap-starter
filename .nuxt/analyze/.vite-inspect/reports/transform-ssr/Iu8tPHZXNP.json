{
  "resolvedId": "/Users/mamthenebo/Me/Help/fuz/roadmap-starter/node_modules/.pnpm/source-map-js@1.0.2/node_modules/source-map-js/lib/base64-vlq.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar base64 = require('./base64');\n\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\n\nvar VLQ_BASE_SHIFT = 5;\n\n// binary: 100000\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n// binary: 011111\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\n\n// binary: 100000\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */\nfunction toVLQSigned(aValue) {\n  return aValue < 0\n    ? ((-aValue) << 1) + 1\n    : (aValue << 1) + 0;\n}\n\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */\nfunction fromVLQSigned(aValue) {\n  var isNegative = (aValue & 1) === 1;\n  var shifted = aValue >> 1;\n  return isNegative\n    ? -shifted\n    : shifted;\n}\n\n/**\n * Returns the base 64 VLQ encoded value.\n */\nexports.encode = function base64VLQ_encode(aValue) {\n  var encoded = \"\";\n  var digit;\n\n  var vlq = toVLQSigned(aValue);\n\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      // There are still more digits in this value, so we must make sure the\n      // continuation bit is marked.\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n\n  return encoded;\n};\n\n/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */\nexports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n  var strLen = aStr.length;\n  var result = 0;\n  var shift = 0;\n  var continuation, digit;\n\n  do {\n    if (aIndex >= strLen) {\n      throw new Error(\"Expected more digits in base 64 VLQ value.\");\n    }\n\n    digit = base64.decode(aStr.charCodeAt(aIndex++));\n    if (digit === -1) {\n      throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n    }\n\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n    digit &= VLQ_BASE_MASK;\n    result = result + (digit << shift);\n    shift += VLQ_BASE_SHIFT;\n  } while (continuation);\n\n  aOutParam.value = fromVLQSigned(result);\n  aOutParam.rest = aIndex;\n};\n",
      "start": 1727610130986,
      "end": 1727610131005,
      "sourcemaps": null
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1727610131005,
      "end": 1727610131005,
      "order": "pre"
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1727610131005,
      "end": 1727610131005,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1727610131005,
      "end": 1727610131005,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1727610131005,
      "end": 1727610131005,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1727610131005,
      "end": 1727610131005,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1727610131005,
      "end": 1727610131005,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1727610131005,
      "end": 1727610131005,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1727610131005,
      "end": 1727610131005,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1727610131005,
      "end": 1727610131005,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1727610131005,
      "end": 1727610131005,
      "order": "pre"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1727610131005,
      "end": 1727610131005,
      "order": "pre"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1727610131005,
      "end": 1727610131005,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1727610131005,
      "end": 1727610131005,
      "order": "pre"
    },
    {
      "name": "server-only-component-transform",
      "start": 1727610131005,
      "end": 1727610131005,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1727610131005,
      "end": 1727610131005,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1727610131005,
      "end": 1727610131005,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1727610131005,
      "end": 1727610131005,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1727610131005,
      "end": 1727610131005,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1727610131005,
      "end": 1727610131005,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1727610131005,
      "end": 1727610131005,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1727610131005,
      "end": 1727610131006,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1727610131005,
      "end": 1727610131006,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727610131006,
      "end": 1727610131006,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727610131006,
      "end": 1727610131006,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1727610131006,
      "end": 1727610131006,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1727610131006,
      "end": 1727610131006,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1727610131006,
      "end": 1727610131006,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1727610131006,
      "end": 1727610131006,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1727610131006,
      "end": 1727610131006,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727610131006,
      "end": 1727610131006,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1727610131006,
      "end": 1727610131006,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "var base64 = require(\"./base64\");\nvar VLQ_BASE_SHIFT = 5;\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\nfunction toVLQSigned(aValue) {\n  return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;\n}\nfunction fromVLQSigned(aValue) {\n  var isNegative = (aValue & 1) === 1;\n  var shifted = aValue >> 1;\n  return isNegative ? -shifted : shifted;\n}\nexports.encode = function base64VLQ_encode(aValue) {\n  var encoded = \"\";\n  var digit;\n  var vlq = toVLQSigned(aValue);\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n  return encoded;\n};\nexports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n  var strLen = aStr.length;\n  var result = 0;\n  var shift = 0;\n  var continuation, digit;\n  do {\n    if (aIndex >= strLen) {\n      throw new Error(\"Expected more digits in base 64 VLQ value.\");\n    }\n    digit = base64.decode(aStr.charCodeAt(aIndex++));\n    if (digit === -1) {\n      throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n    }\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n    digit &= VLQ_BASE_MASK;\n    result = result + (digit << shift);\n    shift += VLQ_BASE_SHIFT;\n  } while (continuation);\n  aOutParam.value = fromVLQSigned(result);\n  aOutParam.rest = aIndex;\n};\n",
      "start": 1727610131006,
      "end": 1727610131361,
      "order": "normal",
      "sourcemaps": "{\n  \"version\": 3,\n  \"sources\": [\"/Users/mamthenebo/Me/Help/fuz/roadmap-starter/node_modules/.pnpm/source-map-js@1.0.2/node_modules/source-map-js/lib/base64-vlq.js\"],\n  \"sourcesContent\": [\"/* -*- Mode: js; js-indent-level: 2; -*- */\\n/*\\n * Copyright 2011 Mozilla Foundation and contributors\\n * Licensed under the New BSD license. See LICENSE or:\\n * http://opensource.org/licenses/BSD-3-Clause\\n *\\n * Based on the Base 64 VLQ implementation in Closure Compiler:\\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\\n *\\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\\n * Redistribution and use in source and binary forms, with or without\\n * modification, are permitted provided that the following conditions are\\n * met:\\n *\\n *  * Redistributions of source code must retain the above copyright\\n *    notice, this list of conditions and the following disclaimer.\\n *  * Redistributions in binary form must reproduce the above\\n *    copyright notice, this list of conditions and the following\\n *    disclaimer in the documentation and/or other materials provided\\n *    with the distribution.\\n *  * Neither the name of Google Inc. nor the names of its\\n *    contributors may be used to endorse or promote products derived\\n *    from this software without specific prior written permission.\\n *\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\\n * \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n */\\n\\nvar base64 = require('./base64');\\n\\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\\n// length quantities we use in the source map spec, the first bit is the sign,\\n// the next four bits are the actual value, and the 6th bit is the\\n// continuation bit. The continuation bit tells us whether there are more\\n// digits in this value following this digit.\\n//\\n//   Continuation\\n//   |    Sign\\n//   |    |\\n//   V    V\\n//   101011\\n\\nvar VLQ_BASE_SHIFT = 5;\\n\\n// binary: 100000\\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\\n\\n// binary: 011111\\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\\n\\n// binary: 100000\\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\\n\\n/**\\n * Converts from a two-complement value to a value where the sign bit is\\n * placed in the least significant bit.  For example, as decimals:\\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\\n */\\nfunction toVLQSigned(aValue) {\\n  return aValue < 0\\n    ? ((-aValue) << 1) + 1\\n    : (aValue << 1) + 0;\\n}\\n\\n/**\\n * Converts to a two-complement value from a value where the sign bit is\\n * placed in the least significant bit.  For example, as decimals:\\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\\n */\\nfunction fromVLQSigned(aValue) {\\n  var isNegative = (aValue & 1) === 1;\\n  var shifted = aValue >> 1;\\n  return isNegative\\n    ? -shifted\\n    : shifted;\\n}\\n\\n/**\\n * Returns the base 64 VLQ encoded value.\\n */\\nexports.encode = function base64VLQ_encode(aValue) {\\n  var encoded = \\\"\\\";\\n  var digit;\\n\\n  var vlq = toVLQSigned(aValue);\\n\\n  do {\\n    digit = vlq & VLQ_BASE_MASK;\\n    vlq >>>= VLQ_BASE_SHIFT;\\n    if (vlq > 0) {\\n      // There are still more digits in this value, so we must make sure the\\n      // continuation bit is marked.\\n      digit |= VLQ_CONTINUATION_BIT;\\n    }\\n    encoded += base64.encode(digit);\\n  } while (vlq > 0);\\n\\n  return encoded;\\n};\\n\\n/**\\n * Decodes the next base 64 VLQ value from the given string and returns the\\n * value and the rest of the string via the out parameter.\\n */\\nexports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\\n  var strLen = aStr.length;\\n  var result = 0;\\n  var shift = 0;\\n  var continuation, digit;\\n\\n  do {\\n    if (aIndex >= strLen) {\\n      throw new Error(\\\"Expected more digits in base 64 VLQ value.\\\");\\n    }\\n\\n    digit = base64.decode(aStr.charCodeAt(aIndex++));\\n    if (digit === -1) {\\n      throw new Error(\\\"Invalid base64 digit: \\\" + aStr.charAt(aIndex - 1));\\n    }\\n\\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\\n    digit &= VLQ_BASE_MASK;\\n    result = result + (digit << shift);\\n    shift += VLQ_BASE_SHIFT;\\n  } while (continuation);\\n\\n  aOutParam.value = fromVLQSigned(result);\\n  aOutParam.rest = aIndex;\\n};\\n\"],\n  \"mappings\": \"AAqCA,IAAI,SAAS,QAAQ,UAAU;AAc/B,IAAI,iBAAiB;AAGrB,IAAI,WAAW,KAAK;AAGpB,IAAI,gBAAgB,WAAW;AAG/B,IAAI,uBAAuB;AAQ3B,SAAS,YAAY,QAAQ;AAC3B,SAAO,SAAS,KACV,CAAC,UAAW,KAAK,KAClB,UAAU,KAAK;AACtB;AAQA,SAAS,cAAc,QAAQ;AAC7B,MAAI,cAAc,SAAS,OAAO;AAClC,MAAI,UAAU,UAAU;AACxB,SAAO,aACH,CAAC,UACD;AACN;AAKA,QAAQ,SAAS,SAAS,iBAAiB,QAAQ;AACjD,MAAI,UAAU;AACd,MAAI;AAEJ,MAAI,MAAM,YAAY,MAAM;AAE5B,KAAG;AACD,YAAQ,MAAM;AACd,aAAS;AACT,QAAI,MAAM,GAAG;AAGX,eAAS;AAAA,IACX;AACA,eAAW,OAAO,OAAO,KAAK;AAAA,EAChC,SAAS,MAAM;AAEf,SAAO;AACT;AAMA,QAAQ,SAAS,SAAS,iBAAiB,MAAM,QAAQ,WAAW;AAClE,MAAI,SAAS,KAAK;AAClB,MAAI,SAAS;AACb,MAAI,QAAQ;AACZ,MAAI,cAAc;AAElB,KAAG;AACD,QAAI,UAAU,QAAQ;AACpB,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AAEA,YAAQ,OAAO,OAAO,KAAK,WAAW,QAAQ,CAAC;AAC/C,QAAI,UAAU,IAAI;AAChB,YAAM,IAAI,MAAM,2BAA2B,KAAK,OAAO,SAAS,CAAC,CAAC;AAAA,IACpE;AAEA,mBAAe,CAAC,EAAE,QAAQ;AAC1B,aAAS;AACT,aAAS,UAAU,SAAS;AAC5B,aAAS;AAAA,EACX,SAAS;AAET,YAAU,QAAQ,cAAc,MAAM;AACtC,YAAU,OAAO;AACnB;\",\n  \"names\": []\n}\n"
    },
    {
      "name": "vite:css-post",
      "start": 1727610131361,
      "end": 1727610131361,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1727610131361,
      "end": 1727610131361,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1727610131361,
      "end": 1727610131361,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1727610131361,
      "end": 1727610131361,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as base64Vlq } from \"\\u0000/Users/mamthenebo/Me/Help/fuz/roadmap-starter/node_modules/.pnpm/source-map-js@1.0.2/node_modules/source-map-js/lib/base64-vlq.js?commonjs-exports\";\nimport require$$0 from \"\\u0000/Users/mamthenebo/Me/Help/fuz/roadmap-starter/node_modules/.pnpm/source-map-js@1.0.2/node_modules/source-map-js/lib/base64.js?commonjs-proxy\";\n\nvar base64 = require$$0;\nvar VLQ_BASE_SHIFT = 5;\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\nfunction toVLQSigned(aValue) {\n  return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;\n}\nfunction fromVLQSigned(aValue) {\n  var isNegative = (aValue & 1) === 1;\n  var shifted = aValue >> 1;\n  return isNegative ? -shifted : shifted;\n}\nvar encode = base64Vlq.encode = function base64VLQ_encode(aValue) {\n  var encoded = \"\";\n  var digit;\n  var vlq = toVLQSigned(aValue);\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n  return encoded;\n};\nvar decode = base64Vlq.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n  var strLen = aStr.length;\n  var result = 0;\n  var shift = 0;\n  var continuation, digit;\n  do {\n    if (aIndex >= strLen) {\n      throw new Error(\"Expected more digits in base 64 VLQ value.\");\n    }\n    digit = base64.decode(aStr.charCodeAt(aIndex++));\n    if (digit === -1) {\n      throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n    }\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n    digit &= VLQ_BASE_MASK;\n    result = result + (digit << shift);\n    shift += VLQ_BASE_SHIFT;\n  } while (continuation);\n  aOutParam.value = fromVLQSigned(result);\n  aOutParam.rest = aIndex;\n};\n\nexport { base64Vlq as __moduleExports, encode, decode, base64Vlq as default };",
      "start": 1727610131361,
      "end": 1727610131383,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;AAAA,IAAI,MAAM,GAAG,UAAmB,CAAC;AACjC,IAAI,cAAc,GAAG,CAAC,CAAC;AACvB,IAAI,QAAQ,GAAG,CAAC,IAAI,cAAc,CAAC;AACnC,IAAI,aAAa,GAAG,QAAQ,GAAG,CAAC,CAAC;AACjC,IAAI,oBAAoB,GAAG,QAAQ,CAAC;AACpC,SAAS,WAAW,CAAC,MAAM,EAAE;AAC7B,EAAE,OAAO,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC;AAC7D,CAAC;AACD,SAAS,aAAa,CAAC,MAAM,EAAE;AAC/B,EAAE,IAAI,UAAU,GAAG,CAAC,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC;AACtC,EAAE,IAAI,OAAO,GAAG,MAAM,IAAI,CAAC,CAAC;AAC5B,EAAE,OAAO,UAAU,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC;AACzC,CAAC;AACD,6BAAc,GAAG,SAAS,gBAAgB,CAAC,MAAM,EAAE;AACnD,EAAE,IAAI,OAAO,GAAG,EAAE,CAAC;AACnB,EAAE,IAAI,KAAK,CAAC;AACZ,EAAE,IAAI,GAAG,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;AAChC,EAAE,GAAG;AACL,IAAI,KAAK,GAAG,GAAG,GAAG,aAAa,CAAC;AAChC,IAAI,GAAG,MAAM,cAAc,CAAC;AAC5B,IAAI,IAAI,GAAG,GAAG,CAAC,EAAE;AACjB,MAAM,KAAK,IAAI,oBAAoB,CAAC;AACpC,KAAK;AACL,IAAI,OAAO,IAAI,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AACpC,GAAG,QAAQ,GAAG,GAAG,CAAC,EAAE;AACpB,EAAE,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AACF,6BAAc,GAAG,SAAS,gBAAgB,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE;AACpE,EAAE,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAC3B,EAAE,IAAI,MAAM,GAAG,CAAC,CAAC;AACjB,EAAE,IAAI,KAAK,GAAG,CAAC,CAAC;AAChB,EAAE,IAAI,YAAY,EAAE,KAAK,CAAC;AAC1B,EAAE,GAAG;AACL,IAAI,IAAI,MAAM,IAAI,MAAM,EAAE;AAC1B,MAAM,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;AACpE,KAAK;AACL,IAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AACrD,IAAI,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;AACtB,MAAM,MAAM,IAAI,KAAK,CAAC,wBAAwB,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;AAC1E,KAAK;AACL,IAAI,YAAY,GAAG,CAAC,EAAE,KAAK,GAAG,oBAAoB,CAAC,CAAC;AACpD,IAAI,KAAK,IAAI,aAAa,CAAC;AAC3B,IAAI,MAAM,GAAG,MAAM,IAAI,KAAK,IAAI,KAAK,CAAC,CAAC;AACvC,IAAI,KAAK,IAAI,cAAc,CAAC;AAC5B,GAAG,QAAQ,YAAY,EAAE;AACzB,EAAE,SAAS,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;AAC1C,EAAE,SAAS,CAAC,IAAI,GAAG,MAAM,CAAC;AAC1B,CAAC"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1727610131383,
      "end": 1727610131383,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1727610131383,
      "end": 1727610131383,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1727610131383,
      "end": 1727610131383,
      "order": "post"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1727610131383,
      "end": 1727610131383,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1727610131383,
      "end": 1727610131383,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1727610131383,
      "end": 1727610131383,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1727610131383,
      "end": 1727610131383,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1727610131383,
      "end": 1727610131383,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1727610131383,
      "end": 1727610131383,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1727610131383,
      "end": 1727610131383,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1727610131383,
      "end": 1727610131383,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1727610131383,
      "end": 1727610131383,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1727610131383,
      "end": 1727610131383,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1727610131383,
      "end": 1727610131383,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1727610131383,
      "end": 1727610131383,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1727610131383,
      "end": 1727610131383,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1727610131383,
      "end": 1727610131383,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1727610131383,
      "end": 1727610131383,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1727610131383,
      "end": 1727610131383,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1727610131383,
      "end": 1727610131384,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1727610131384,
      "end": 1727610131384,
      "order": "normal"
    }
  ]
}
