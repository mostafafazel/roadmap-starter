{
  "resolvedId": "/Users/mamthenebo/Me/Help/fuz/roadmap-starter/node_modules/.pnpm/@nuxtjs+i18n@8.3.0_rollup@4.14.1_vue@3.4.21_typescript@5.6.2_/node_modules/@nuxtjs/i18n/dist/runtime/messages.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { deepCopy, isFunction, isArray, isObject, isString } from \"@intlify/shared\";\nconst cacheMessages = /* @__PURE__ */ new Map();\nexport async function loadVueI18nOptions(vueI18nConfigs, nuxt) {\n  const vueI18nOptions = { messages: {} };\n  for (const configFile of vueI18nConfigs) {\n    const { default: resolver } = await configFile();\n    const resolved = typeof resolver === \"function\" ? await nuxt.runWithContext(async () => await resolver()) : resolver;\n    deepCopy(resolved, vueI18nOptions);\n  }\n  return vueI18nOptions;\n}\nexport function makeFallbackLocaleCodes(fallback, locales) {\n  let fallbackLocales = [];\n  if (isArray(fallback)) {\n    fallbackLocales = fallback;\n  } else if (isObject(fallback)) {\n    const targets = [...locales, \"default\"];\n    for (const locale of targets) {\n      if (fallback[locale]) {\n        fallbackLocales = [...fallbackLocales, ...fallback[locale].filter(Boolean)];\n      }\n    }\n  } else if (isString(fallback) && locales.every((locale) => locale !== fallback)) {\n    fallbackLocales.push(fallback);\n  }\n  return fallbackLocales;\n}\nexport async function loadInitialMessages(messages, localeLoaders, options) {\n  const { defaultLocale, initialLocale, localeCodes, fallbackLocale, lazy } = options;\n  if (lazy && fallbackLocale) {\n    const fallbackLocales = makeFallbackLocaleCodes(fallbackLocale, [defaultLocale, initialLocale]);\n    await Promise.all(fallbackLocales.map((locale) => loadAndSetLocaleMessages(locale, localeLoaders, messages)));\n  }\n  const locales = lazy ? [...(/* @__PURE__ */ new Set()).add(defaultLocale).add(initialLocale)] : localeCodes;\n  await Promise.all(locales.map((locale) => loadAndSetLocaleMessages(locale, localeLoaders, messages)));\n  return messages;\n}\nasync function loadMessage(locale, { key, load }) {\n  let message = null;\n  try {\n    __DEBUG__ && console.log(\"loadMessage: (locale) -\", locale);\n    const getter = await load().then((r) => r.default || r);\n    if (isFunction(getter)) {\n      message = await getter(locale);\n      __DEBUG__ && console.log(\"loadMessage: dynamic load\", message);\n    } else {\n      message = getter;\n      if (message != null && cacheMessages) {\n        cacheMessages.set(key, message);\n      }\n      __DEBUG__ && console.log(\"loadMessage: load\", message);\n    }\n  } catch (e) {\n    console.error(\"Failed locale loading: \" + e.message);\n  }\n  return message;\n}\nexport async function loadLocale(locale, localeLoaders, setter) {\n  const loaders = localeLoaders[locale];\n  if (loaders == null) {\n    console.warn(\"Could not find messages for locale code: \" + locale);\n    return;\n  }\n  const targetMessage = {};\n  for (const loader of loaders) {\n    let message = null;\n    if (cacheMessages && cacheMessages.has(loader.key) && loader.cache) {\n      __DEBUG__ && console.log(loader.key + \" is already loaded\");\n      message = cacheMessages.get(loader.key);\n    } else {\n      __DEBUG__ && !loader.cache && console.log(loader.key + \" bypassing cache!\");\n      __DEBUG__ && console.log(loader.key + \" is loading ...\");\n      message = await loadMessage(locale, loader);\n    }\n    if (message != null) {\n      deepCopy(message, targetMessage);\n    }\n  }\n  setter(locale, targetMessage);\n}\nexport async function loadAndSetLocaleMessages(locale, localeLoaders, messages) {\n  const setter = (locale2, message) => {\n    const base = messages[locale2] || {};\n    deepCopy(message, base);\n    messages[locale2] = base;\n  };\n  await loadLocale(locale, localeLoaders, setter);\n}\n",
      "start": 1727610127798,
      "end": 1727610127843,
      "sourcemaps": null
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1727610127843,
      "end": 1727610127843,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1727610127843,
      "end": 1727610127843,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1727610127843,
      "end": 1727610127843,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1727610127843,
      "end": 1727610127843,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1727610127843,
      "end": 1727610127843,
      "order": "pre"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1727610127843,
      "end": 1727610127843,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1727610127843,
      "end": 1727610127843,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1727610127843,
      "end": 1727610127843,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1727610127843,
      "end": 1727610127843,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1727610127843,
      "end": 1727610127843,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1727610127843,
      "end": 1727610127843,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1727610127843,
      "end": 1727610127843,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1727610127843,
      "end": 1727610127843,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1727610127843,
      "end": 1727610127843,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727610127843,
      "end": 1727610127843,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1727610127843,
      "end": 1727610127843,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1727610127843,
      "end": 1727610127843,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1727610127843,
      "end": 1727610127843,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1727610127843,
      "end": 1727610127843,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727610127843,
      "end": 1727610127843,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1727610127843,
      "end": 1727610127843,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { deepCopy, isFunction, isArray, isObject, isString } from \"@intlify/shared\";\nconst cacheMessages = /* @__PURE__ */ new Map();\nexport async function loadVueI18nOptions(vueI18nConfigs, nuxt) {\n  const vueI18nOptions = { messages: {} };\n  for (const configFile of vueI18nConfigs) {\n    const { default: resolver } = await configFile();\n    const resolved = typeof resolver === \"function\" ? await nuxt.runWithContext(async () => await resolver()) : resolver;\n    deepCopy(resolved, vueI18nOptions);\n  }\n  return vueI18nOptions;\n}\nexport function makeFallbackLocaleCodes(fallback, locales) {\n  let fallbackLocales = [];\n  if (isArray(fallback)) {\n    fallbackLocales = fallback;\n  } else if (isObject(fallback)) {\n    const targets = [...locales, \"default\"];\n    for (const locale of targets) {\n      if (fallback[locale]) {\n        fallbackLocales = [...fallbackLocales, ...fallback[locale].filter(Boolean)];\n      }\n    }\n  } else if (isString(fallback) && locales.every((locale) => locale !== fallback)) {\n    fallbackLocales.push(fallback);\n  }\n  return fallbackLocales;\n}\nexport async function loadInitialMessages(messages, localeLoaders, options) {\n  const { defaultLocale, initialLocale, localeCodes, fallbackLocale, lazy } = options;\n  if (lazy && fallbackLocale) {\n    const fallbackLocales = makeFallbackLocaleCodes(fallbackLocale, [defaultLocale, initialLocale]);\n    await Promise.all(fallbackLocales.map((locale) => loadAndSetLocaleMessages(locale, localeLoaders, messages)));\n  }\n  const locales = lazy ? [...(/* @__PURE__ */ new Set()).add(defaultLocale).add(initialLocale)] : localeCodes;\n  await Promise.all(locales.map((locale) => loadAndSetLocaleMessages(locale, localeLoaders, messages)));\n  return messages;\n}\nasync function loadMessage(locale, { key, load }) {\n  let message = null;\n  try {\n    const getter = await load().then((r) => r.default || r);\n    if (isFunction(getter)) {\n      message = await getter(locale);\n    } else {\n      message = getter;\n      if (message != null && cacheMessages) {\n        cacheMessages.set(key, message);\n      }\n    }\n  } catch (e) {\n    console.error(\"Failed locale loading: \" + e.message);\n  }\n  return message;\n}\nexport async function loadLocale(locale, localeLoaders, setter) {\n  const loaders = localeLoaders[locale];\n  if (loaders == null) {\n    console.warn(\"Could not find messages for locale code: \" + locale);\n    return;\n  }\n  const targetMessage = {};\n  for (const loader of loaders) {\n    let message = null;\n    if (cacheMessages && cacheMessages.has(loader.key) && loader.cache) {\n      message = cacheMessages.get(loader.key);\n    } else {\n      message = await loadMessage(locale, loader);\n    }\n    if (message != null) {\n      deepCopy(message, targetMessage);\n    }\n  }\n  setter(locale, targetMessage);\n}\nexport async function loadAndSetLocaleMessages(locale, localeLoaders, messages) {\n  const setter = (locale2, message) => {\n    const base = messages[locale2] || {};\n    deepCopy(message, base);\n    messages[locale2] = base;\n  };\n  await loadLocale(locale, localeLoaders, setter);\n}\n",
      "start": 1727610127843,
      "end": 1727610128070,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1727610128070,
      "end": 1727610128070,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1727610128071,
      "end": 1727610128071,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1727610128071,
      "end": 1727610128071,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1727610128071,
      "end": 1727610128071,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1727610128071,
      "end": 1727610128071,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1727610128071,
      "end": 1727610128071,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1727610128071,
      "end": 1727610128071,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1727610128071,
      "end": 1727610128071,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1727610128071,
      "end": 1727610128071,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1727610128071,
      "end": 1727610128071,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1727610128071,
      "end": 1727610128071,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1727610128071,
      "end": 1727610128072,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1727610128072,
      "end": 1727610128072,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1727610128073,
      "end": 1727610128073,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1727610128073,
      "end": 1727610128073,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1727610128073,
      "end": 1727610128073,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1727610128073,
      "end": 1727610128073,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1727610128073,
      "end": 1727610128073,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1727610128073,
      "end": 1727610128073,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1727610128073,
      "end": 1727610128073,
      "order": "normal"
    }
  ]
}
