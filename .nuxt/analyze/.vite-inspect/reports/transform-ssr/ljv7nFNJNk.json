{
  "resolvedId": "/Users/mamthenebo/Me/Help/fuz/roadmap-starter/node_modules/.pnpm/source-map-js@1.0.2/node_modules/source-map-js/lib/quick-sort.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n// It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n\nfunction SortTemplate(comparator) {\n\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */\nfunction swap(ary, x, y) {\n  var temp = ary[x];\n  ary[x] = ary[y];\n  ary[y] = temp;\n}\n\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */\nfunction randomIntInRange(low, high) {\n  return Math.round(low + (Math.random() * (high - low)));\n}\n\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */\nfunction doQuickSort(ary, comparator, p, r) {\n  // If our lower bound is less than our upper bound, we (1) partition the\n  // array into two pieces and (2) recurse on each half. If it is not, this is\n  // the empty array and our base case.\n\n  if (p < r) {\n    // (1) Partitioning.\n    //\n    // The partitioning chooses a pivot between `p` and `r` and moves all\n    // elements that are less than or equal to the pivot to the before it, and\n    // all the elements that are greater than it after it. The effect is that\n    // once partition is done, the pivot is in the exact place it will be when\n    // the array is put in sorted order, and it will not need to be moved\n    // again. This runs in O(n) time.\n\n    // Always choose a random pivot so that an input array which is reverse\n    // sorted does not cause O(n^2) running time.\n    var pivotIndex = randomIntInRange(p, r);\n    var i = p - 1;\n\n    swap(ary, pivotIndex, r);\n    var pivot = ary[r];\n\n    // Immediately after `j` is incremented in this loop, the following hold\n    // true:\n    //\n    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n    //\n    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n    for (var j = p; j < r; j++) {\n      if (comparator(ary[j], pivot, false) <= 0) {\n        i += 1;\n        swap(ary, i, j);\n      }\n    }\n\n    swap(ary, i + 1, j);\n    var q = i + 1;\n\n    // (2) Recurse on each half.\n\n    doQuickSort(ary, comparator, p, q - 1);\n    doQuickSort(ary, comparator, q + 1, r);\n  }\n}\n\n  return doQuickSort;\n}\n\nfunction cloneSort(comparator) {\n  let template = SortTemplate.toString();\n  let templateFn = new Function(`return ${template}`)();\n  return templateFn(comparator);\n}\n\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */\n\nlet sortCache = new WeakMap();\nexports.quickSort = function (ary, comparator, start = 0) {\n  let doQuickSort = sortCache.get(comparator);\n  if (doQuickSort === void 0) {\n    doQuickSort = cloneSort(comparator);\n    sortCache.set(comparator, doQuickSort);\n  }\n  doQuickSort(ary, comparator, start, ary.length - 1);\n};\n",
      "start": 1727610131394,
      "end": 1727610131397,
      "sourcemaps": null
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "pre"
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "pre"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "pre"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "pre"
    },
    {
      "name": "server-only-component-transform",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1727610131397,
      "end": 1727610131397,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "/* -*- Mode: js; js-indent-level: 2; -*- */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as quickSort } from \"\\u0000/Users/mamthenebo/Me/Help/fuz/roadmap-starter/node_modules/.pnpm/source-map-js@1.0.2/node_modules/source-map-js/lib/quick-sort.js?commonjs-exports\";\n\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n// It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n\nfunction SortTemplate(comparator) {\n\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */\nfunction swap(ary, x, y) {\n  var temp = ary[x];\n  ary[x] = ary[y];\n  ary[y] = temp;\n}\n\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */\nfunction randomIntInRange(low, high) {\n  return Math.round(low + (Math.random() * (high - low)));\n}\n\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */\nfunction doQuickSort(ary, comparator, p, r) {\n  // If our lower bound is less than our upper bound, we (1) partition the\n  // array into two pieces and (2) recurse on each half. If it is not, this is\n  // the empty array and our base case.\n\n  if (p < r) {\n    // (1) Partitioning.\n    //\n    // The partitioning chooses a pivot between `p` and `r` and moves all\n    // elements that are less than or equal to the pivot to the before it, and\n    // all the elements that are greater than it after it. The effect is that\n    // once partition is done, the pivot is in the exact place it will be when\n    // the array is put in sorted order, and it will not need to be moved\n    // again. This runs in O(n) time.\n\n    // Always choose a random pivot so that an input array which is reverse\n    // sorted does not cause O(n^2) running time.\n    var pivotIndex = randomIntInRange(p, r);\n    var i = p - 1;\n\n    swap(ary, pivotIndex, r);\n    var pivot = ary[r];\n\n    // Immediately after `j` is incremented in this loop, the following hold\n    // true:\n    //\n    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n    //\n    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n    for (var j = p; j < r; j++) {\n      if (comparator(ary[j], pivot, false) <= 0) {\n        i += 1;\n        swap(ary, i, j);\n      }\n    }\n\n    swap(ary, i + 1, j);\n    var q = i + 1;\n\n    // (2) Recurse on each half.\n\n    doQuickSort(ary, comparator, p, q - 1);\n    doQuickSort(ary, comparator, q + 1, r);\n  }\n}\n\n  return doQuickSort;\n}\n\nfunction cloneSort(comparator) {\n  let template = SortTemplate.toString();\n  let templateFn = new Function(`return ${template}`)();\n  return templateFn(comparator);\n}\n\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */\n\nlet sortCache = new WeakMap();\nvar quickSort_1 = quickSort.quickSort = function (ary, comparator, start = 0) {\n  let doQuickSort = sortCache.get(comparator);\n  if (doQuickSort === void 0) {\n    doQuickSort = cloneSort(comparator);\n    sortCache.set(comparator, doQuickSort);\n  }\n  doQuickSort(ary, comparator, start, ary.length - 1);\n};\n\nexport { quickSort as __moduleExports, quickSort_1 as quickSort, quickSort as default };",
      "start": 1727610131397,
      "end": 1727610131398,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1727610131398,
      "end": 1727610131398,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1727610131398,
      "end": 1727610131398,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1727610131398,
      "end": 1727610131398,
      "order": "post"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1727610131398,
      "end": 1727610131398,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1727610131398,
      "end": 1727610131398,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1727610131398,
      "end": 1727610131398,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1727610131398,
      "end": 1727610131398,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1727610131398,
      "end": 1727610131398,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1727610131398,
      "end": 1727610131398,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1727610131398,
      "end": 1727610131398,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1727610131398,
      "end": 1727610131398,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1727610131398,
      "end": 1727610131398,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1727610131398,
      "end": 1727610131398,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1727610131398,
      "end": 1727610131398,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1727610131398,
      "end": 1727610131398,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1727610131398,
      "end": 1727610131398,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1727610131398,
      "end": 1727610131398,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1727610131398,
      "end": 1727610131398,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1727610131398,
      "end": 1727610131398,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1727610131398,
      "end": 1727610131398,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1727610131398,
      "end": 1727610131398,
      "order": "normal"
    }
  ]
}
