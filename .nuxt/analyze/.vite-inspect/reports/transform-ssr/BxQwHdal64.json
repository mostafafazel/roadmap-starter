{
  "resolvedId": "/Users/mamthenebo/Me/Help/fuz/roadmap-starter/node_modules/.pnpm/entities@4.5.0/node_modules/entities/lib/decode.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTMLAttribute = exports.decodeHTML = exports.determineBranch = exports.EntityDecoder = exports.DecodingMode = exports.BinTrieFlags = exports.fromCodePoint = exports.replaceCodePoint = exports.decodeCodePoint = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;\nvar decode_data_html_js_1 = __importDefault(require(\"./generated/decode-data-html.js\"));\nexports.htmlDecodeTree = decode_data_html_js_1.default;\nvar decode_data_xml_js_1 = __importDefault(require(\"./generated/decode-data-xml.js\"));\nexports.xmlDecodeTree = decode_data_xml_js_1.default;\nvar decode_codepoint_js_1 = __importStar(require(\"./decode_codepoint.js\"));\nexports.decodeCodePoint = decode_codepoint_js_1.default;\nvar decode_codepoint_js_2 = require(\"./decode_codepoint.js\");\nObject.defineProperty(exports, \"replaceCodePoint\", { enumerable: true, get: function () { return decode_codepoint_js_2.replaceCodePoint; } });\nObject.defineProperty(exports, \"fromCodePoint\", { enumerable: true, get: function () { return decode_codepoint_js_2.fromCodePoint; } });\nvar CharCodes;\n(function (CharCodes) {\n    CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n    CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n    CharCodes[CharCodes[\"EQUALS\"] = 61] = \"EQUALS\";\n    CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n    CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n    CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n    CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n    CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n    CharCodes[CharCodes[\"LOWER_Z\"] = 122] = \"LOWER_Z\";\n    CharCodes[CharCodes[\"UPPER_A\"] = 65] = \"UPPER_A\";\n    CharCodes[CharCodes[\"UPPER_F\"] = 70] = \"UPPER_F\";\n    CharCodes[CharCodes[\"UPPER_Z\"] = 90] = \"UPPER_Z\";\n})(CharCodes || (CharCodes = {}));\n/** Bit that needs to be set to convert an upper case ASCII character to lower case */\nvar TO_LOWER_BIT = 32;\nvar BinTrieFlags;\n(function (BinTrieFlags) {\n    BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));\nfunction isNumber(code) {\n    return code >= CharCodes.ZERO && code <= CharCodes.NINE;\n}\nfunction isHexadecimalCharacter(code) {\n    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F) ||\n        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F));\n}\nfunction isAsciiAlphaNumeric(code) {\n    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z) ||\n        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z) ||\n        isNumber(code));\n}\n/**\n * Checks if the given character is a valid end character for an entity in an attribute.\n *\n * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n */\nfunction isEntityInAttributeInvalidEnd(code) {\n    return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);\n}\nvar EntityDecoderState;\n(function (EntityDecoderState) {\n    EntityDecoderState[EntityDecoderState[\"EntityStart\"] = 0] = \"EntityStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericStart\"] = 1] = \"NumericStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericDecimal\"] = 2] = \"NumericDecimal\";\n    EntityDecoderState[EntityDecoderState[\"NumericHex\"] = 3] = \"NumericHex\";\n    EntityDecoderState[EntityDecoderState[\"NamedEntity\"] = 4] = \"NamedEntity\";\n})(EntityDecoderState || (EntityDecoderState = {}));\nvar DecodingMode;\n(function (DecodingMode) {\n    /** Entities in text nodes that can end with any character. */\n    DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n    /** Only allow entities terminated with a semicolon. */\n    DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n    /** Entities in attributes have limitations on ending characters. */\n    DecodingMode[DecodingMode[\"Attribute\"] = 2] = \"Attribute\";\n})(DecodingMode = exports.DecodingMode || (exports.DecodingMode = {}));\n/**\n * Token decoder with support of writing partial entities.\n */\nvar EntityDecoder = /** @class */ (function () {\n    function EntityDecoder(\n    /** The tree used to decode entities. */\n    decodeTree, \n    /**\n     * The function that is called when a codepoint is decoded.\n     *\n     * For multi-byte named entities, this will be called multiple times,\n     * with the second codepoint, and the same `consumed` value.\n     *\n     * @param codepoint The decoded codepoint.\n     * @param consumed The number of bytes consumed by the decoder.\n     */\n    emitCodePoint, \n    /** An object that is used to produce errors. */\n    errors) {\n        this.decodeTree = decodeTree;\n        this.emitCodePoint = emitCodePoint;\n        this.errors = errors;\n        /** The current state of the decoder. */\n        this.state = EntityDecoderState.EntityStart;\n        /** Characters that were consumed while parsing an entity. */\n        this.consumed = 1;\n        /**\n         * The result of the entity.\n         *\n         * Either the result index of a numeric entity, or the codepoint of a\n         * numeric entity.\n         */\n        this.result = 0;\n        /** The current index in the decode tree. */\n        this.treeIndex = 0;\n        /** The number of characters that were consumed in excess. */\n        this.excess = 1;\n        /** The mode in which the decoder is operating. */\n        this.decodeMode = DecodingMode.Strict;\n    }\n    /** Resets the instance to make it reusable. */\n    EntityDecoder.prototype.startEntity = function (decodeMode) {\n        this.decodeMode = decodeMode;\n        this.state = EntityDecoderState.EntityStart;\n        this.result = 0;\n        this.treeIndex = 0;\n        this.excess = 1;\n        this.consumed = 1;\n    };\n    /**\n     * Write an entity to the decoder. This can be called multiple times with partial entities.\n     * If the entity is incomplete, the decoder will return -1.\n     *\n     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the\n     * entity is incomplete, and resume when the next string is written.\n     *\n     * @param string The string containing the entity (or a continuation of the entity).\n     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    EntityDecoder.prototype.write = function (str, offset) {\n        switch (this.state) {\n            case EntityDecoderState.EntityStart: {\n                if (str.charCodeAt(offset) === CharCodes.NUM) {\n                    this.state = EntityDecoderState.NumericStart;\n                    this.consumed += 1;\n                    return this.stateNumericStart(str, offset + 1);\n                }\n                this.state = EntityDecoderState.NamedEntity;\n                return this.stateNamedEntity(str, offset);\n            }\n            case EntityDecoderState.NumericStart: {\n                return this.stateNumericStart(str, offset);\n            }\n            case EntityDecoderState.NumericDecimal: {\n                return this.stateNumericDecimal(str, offset);\n            }\n            case EntityDecoderState.NumericHex: {\n                return this.stateNumericHex(str, offset);\n            }\n            case EntityDecoderState.NamedEntity: {\n                return this.stateNamedEntity(str, offset);\n            }\n        }\n    };\n    /**\n     * Switches between the numeric decimal and hexadecimal states.\n     *\n     * Equivalent to the `Numeric character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    EntityDecoder.prototype.stateNumericStart = function (str, offset) {\n        if (offset >= str.length) {\n            return -1;\n        }\n        if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {\n            this.state = EntityDecoderState.NumericHex;\n            this.consumed += 1;\n            return this.stateNumericHex(str, offset + 1);\n        }\n        this.state = EntityDecoderState.NumericDecimal;\n        return this.stateNumericDecimal(str, offset);\n    };\n    EntityDecoder.prototype.addToNumericResult = function (str, start, end, base) {\n        if (start !== end) {\n            var digitCount = end - start;\n            this.result =\n                this.result * Math.pow(base, digitCount) +\n                    parseInt(str.substr(start, digitCount), base);\n            this.consumed += digitCount;\n        }\n    };\n    /**\n     * Parses a hexadecimal numeric entity.\n     *\n     * Equivalent to the `Hexademical character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    EntityDecoder.prototype.stateNumericHex = function (str, offset) {\n        var startIdx = offset;\n        while (offset < str.length) {\n            var char = str.charCodeAt(offset);\n            if (isNumber(char) || isHexadecimalCharacter(char)) {\n                offset += 1;\n            }\n            else {\n                this.addToNumericResult(str, startIdx, offset, 16);\n                return this.emitNumericEntity(char, 3);\n            }\n        }\n        this.addToNumericResult(str, startIdx, offset, 16);\n        return -1;\n    };\n    /**\n     * Parses a decimal numeric entity.\n     *\n     * Equivalent to the `Decimal character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    EntityDecoder.prototype.stateNumericDecimal = function (str, offset) {\n        var startIdx = offset;\n        while (offset < str.length) {\n            var char = str.charCodeAt(offset);\n            if (isNumber(char)) {\n                offset += 1;\n            }\n            else {\n                this.addToNumericResult(str, startIdx, offset, 10);\n                return this.emitNumericEntity(char, 2);\n            }\n        }\n        this.addToNumericResult(str, startIdx, offset, 10);\n        return -1;\n    };\n    /**\n     * Validate and emit a numeric entity.\n     *\n     * Implements the logic from the `Hexademical character reference start\n     * state` and `Numeric character reference end state` in the HTML spec.\n     *\n     * @param lastCp The last code point of the entity. Used to see if the\n     *               entity was terminated with a semicolon.\n     * @param expectedLength The minimum number of characters that should be\n     *                       consumed. Used to validate that at least one digit\n     *                       was consumed.\n     * @returns The number of characters that were consumed.\n     */\n    EntityDecoder.prototype.emitNumericEntity = function (lastCp, expectedLength) {\n        var _a;\n        // Ensure we consumed at least one digit.\n        if (this.consumed <= expectedLength) {\n            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n            return 0;\n        }\n        // Figure out if this is a legit end of the entity\n        if (lastCp === CharCodes.SEMI) {\n            this.consumed += 1;\n        }\n        else if (this.decodeMode === DecodingMode.Strict) {\n            return 0;\n        }\n        this.emitCodePoint((0, decode_codepoint_js_1.replaceCodePoint)(this.result), this.consumed);\n        if (this.errors) {\n            if (lastCp !== CharCodes.SEMI) {\n                this.errors.missingSemicolonAfterCharacterReference();\n            }\n            this.errors.validateNumericCharacterReference(this.result);\n        }\n        return this.consumed;\n    };\n    /**\n     * Parses a named entity.\n     *\n     * Equivalent to the `Named character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    EntityDecoder.prototype.stateNamedEntity = function (str, offset) {\n        var decodeTree = this.decodeTree;\n        var current = decodeTree[this.treeIndex];\n        // The mask is the number of bytes of the value, including the current byte.\n        var valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n        for (; offset < str.length; offset++, this.excess++) {\n            var char = str.charCodeAt(offset);\n            this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);\n            if (this.treeIndex < 0) {\n                return this.result === 0 ||\n                    // If we are parsing an attribute\n                    (this.decodeMode === DecodingMode.Attribute &&\n                        // We shouldn't have consumed any characters after the entity,\n                        (valueLength === 0 ||\n                            // And there should be no invalid characters.\n                            isEntityInAttributeInvalidEnd(char)))\n                    ? 0\n                    : this.emitNotTerminatedNamedEntity();\n            }\n            current = decodeTree[this.treeIndex];\n            valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n            // If the branch is a value, store it and continue\n            if (valueLength !== 0) {\n                // If the entity is terminated by a semicolon, we are done.\n                if (char === CharCodes.SEMI) {\n                    return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);\n                }\n                // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.\n                if (this.decodeMode !== DecodingMode.Strict) {\n                    this.result = this.treeIndex;\n                    this.consumed += this.excess;\n                    this.excess = 0;\n                }\n            }\n        }\n        return -1;\n    };\n    /**\n     * Emit a named entity that was not terminated with a semicolon.\n     *\n     * @returns The number of characters consumed.\n     */\n    EntityDecoder.prototype.emitNotTerminatedNamedEntity = function () {\n        var _a;\n        var _b = this, result = _b.result, decodeTree = _b.decodeTree;\n        var valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;\n        this.emitNamedEntityData(result, valueLength, this.consumed);\n        (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();\n        return this.consumed;\n    };\n    /**\n     * Emit a named entity.\n     *\n     * @param result The index of the entity in the decode tree.\n     * @param valueLength The number of bytes in the entity.\n     * @param consumed The number of characters consumed.\n     *\n     * @returns The number of characters consumed.\n     */\n    EntityDecoder.prototype.emitNamedEntityData = function (result, valueLength, consumed) {\n        var decodeTree = this.decodeTree;\n        this.emitCodePoint(valueLength === 1\n            ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH\n            : decodeTree[result + 1], consumed);\n        if (valueLength === 3) {\n            // For multi-byte values, we need to emit the second byte.\n            this.emitCodePoint(decodeTree[result + 2], consumed);\n        }\n        return consumed;\n    };\n    /**\n     * Signal to the parser that the end of the input was reached.\n     *\n     * Remaining data will be emitted and relevant errors will be produced.\n     *\n     * @returns The number of characters consumed.\n     */\n    EntityDecoder.prototype.end = function () {\n        var _a;\n        switch (this.state) {\n            case EntityDecoderState.NamedEntity: {\n                // Emit a named entity if we have one.\n                return this.result !== 0 &&\n                    (this.decodeMode !== DecodingMode.Attribute ||\n                        this.result === this.treeIndex)\n                    ? this.emitNotTerminatedNamedEntity()\n                    : 0;\n            }\n            // Otherwise, emit a numeric entity if we have one.\n            case EntityDecoderState.NumericDecimal: {\n                return this.emitNumericEntity(0, 2);\n            }\n            case EntityDecoderState.NumericHex: {\n                return this.emitNumericEntity(0, 3);\n            }\n            case EntityDecoderState.NumericStart: {\n                (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n                return 0;\n            }\n            case EntityDecoderState.EntityStart: {\n                // Return 0 if we have no entity.\n                return 0;\n            }\n        }\n    };\n    return EntityDecoder;\n}());\nexports.EntityDecoder = EntityDecoder;\n/**\n * Creates a function that decodes entities in a string.\n *\n * @param decodeTree The decode tree.\n * @returns A function that decodes entities in a string.\n */\nfunction getDecoder(decodeTree) {\n    var ret = \"\";\n    var decoder = new EntityDecoder(decodeTree, function (str) { return (ret += (0, decode_codepoint_js_1.fromCodePoint)(str)); });\n    return function decodeWithTrie(str, decodeMode) {\n        var lastIndex = 0;\n        var offset = 0;\n        while ((offset = str.indexOf(\"&\", offset)) >= 0) {\n            ret += str.slice(lastIndex, offset);\n            decoder.startEntity(decodeMode);\n            var len = decoder.write(str, \n            // Skip the \"&\"\n            offset + 1);\n            if (len < 0) {\n                lastIndex = offset + decoder.end();\n                break;\n            }\n            lastIndex = offset + len;\n            // If `len` is 0, skip the current `&` and continue.\n            offset = len === 0 ? lastIndex + 1 : lastIndex;\n        }\n        var result = ret + str.slice(lastIndex);\n        // Make sure we don't keep a reference to the final string.\n        ret = \"\";\n        return result;\n    };\n}\n/**\n * Determines the branch of the current node that is taken given the current\n * character. This function is used to traverse the trie.\n *\n * @param decodeTree The trie.\n * @param current The current node.\n * @param nodeIdx The index right after the current node and its value.\n * @param char The current character.\n * @returns The index of the next node, or -1 if no branch is taken.\n */\nfunction determineBranch(decodeTree, current, nodeIdx, char) {\n    var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n    var jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n    // Case 1: Single branch encoded in jump offset\n    if (branchCount === 0) {\n        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n    }\n    // Case 2: Multiple branches encoded in jump table\n    if (jumpOffset) {\n        var value = char - jumpOffset;\n        return value < 0 || value >= branchCount\n            ? -1\n            : decodeTree[nodeIdx + value] - 1;\n    }\n    // Case 3: Multiple branches encoded in dictionary\n    // Binary search for the character.\n    var lo = nodeIdx;\n    var hi = lo + branchCount - 1;\n    while (lo <= hi) {\n        var mid = (lo + hi) >>> 1;\n        var midVal = decodeTree[mid];\n        if (midVal < char) {\n            lo = mid + 1;\n        }\n        else if (midVal > char) {\n            hi = mid - 1;\n        }\n        else {\n            return decodeTree[mid + branchCount];\n        }\n    }\n    return -1;\n}\nexports.determineBranch = determineBranch;\nvar htmlDecoder = getDecoder(decode_data_html_js_1.default);\nvar xmlDecoder = getDecoder(decode_data_xml_js_1.default);\n/**\n * Decodes an HTML string.\n *\n * @param str The string to decode.\n * @param mode The decoding mode.\n * @returns The decoded string.\n */\nfunction decodeHTML(str, mode) {\n    if (mode === void 0) { mode = DecodingMode.Legacy; }\n    return htmlDecoder(str, mode);\n}\nexports.decodeHTML = decodeHTML;\n/**\n * Decodes an HTML string in an attribute.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nfunction decodeHTMLAttribute(str) {\n    return htmlDecoder(str, DecodingMode.Attribute);\n}\nexports.decodeHTMLAttribute = decodeHTMLAttribute;\n/**\n * Decodes an HTML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nfunction decodeHTMLStrict(str) {\n    return htmlDecoder(str, DecodingMode.Strict);\n}\nexports.decodeHTMLStrict = decodeHTMLStrict;\n/**\n * Decodes an XML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nfunction decodeXML(str) {\n    return xmlDecoder(str, DecodingMode.Strict);\n}\nexports.decodeXML = decodeXML;\n//# sourceMappingURL=decode.js.map",
      "start": 1727610130956,
      "end": 1727610130967,
      "sourcemaps": null
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1727610130967,
      "end": 1727610130967,
      "order": "pre"
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1727610130967,
      "end": 1727610130967,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1727610130967,
      "end": 1727610130967,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1727610130967,
      "end": 1727610130967,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1727610130967,
      "end": 1727610130967,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1727610130967,
      "end": 1727610130967,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1727610130967,
      "end": 1727610130967,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1727610130967,
      "end": 1727610130967,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1727610130967,
      "end": 1727610130967,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1727610130967,
      "end": 1727610130967,
      "order": "pre"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1727610130967,
      "end": 1727610130967,
      "order": "pre"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1727610130967,
      "end": 1727610130967,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1727610130967,
      "end": 1727610130967,
      "order": "pre"
    },
    {
      "name": "server-only-component-transform",
      "start": 1727610130967,
      "end": 1727610130967,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1727610130967,
      "end": 1727610130967,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1727610130967,
      "end": 1727610130967,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1727610130967,
      "end": 1727610130967,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1727610130967,
      "end": 1727610130967,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1727610130967,
      "end": 1727610130967,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1727610130967,
      "end": 1727610130967,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1727610130967,
      "end": 1727610130967,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1727610130967,
      "end": 1727610130967,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727610130967,
      "end": 1727610130968,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727610130967,
      "end": 1727610130968,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1727610130968,
      "end": 1727610130968,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1727610130968,
      "end": 1727610130968,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1727610130968,
      "end": 1727610130968,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1727610130968,
      "end": 1727610130968,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1727610130968,
      "end": 1727610130968,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727610130968,
      "end": 1727610130968,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1727610130968,
      "end": 1727610130968,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1727610130968,
      "end": 1727610130968,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1727610130968,
      "end": 1727610130968,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1727610130968,
      "end": 1727610130968,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1727610130968,
      "end": 1727610130968,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1727610130968,
      "end": 1727610130968,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as decode } from \"\\u0000/Users/mamthenebo/Me/Help/fuz/roadmap-starter/node_modules/.pnpm/entities@4.5.0/node_modules/entities/lib/decode.js?commonjs-exports\";\nimport require$$0 from \"\\u0000/Users/mamthenebo/Me/Help/fuz/roadmap-starter/node_modules/.pnpm/entities@4.5.0/node_modules/entities/lib/generated/decode-data-html.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/Users/mamthenebo/Me/Help/fuz/roadmap-starter/node_modules/.pnpm/entities@4.5.0/node_modules/entities/lib/generated/decode-data-xml.js?commonjs-proxy\";\nimport require$$2 from \"\\u0000/Users/mamthenebo/Me/Help/fuz/roadmap-starter/node_modules/.pnpm/entities@4.5.0/node_modules/entities/lib/decode_codepoint.js?commonjs-proxy\";\n\n(function (exports) {\n\t\"use strict\";\n\tvar __createBinding = (commonjsHelpers.commonjsGlobal && commonjsHelpers.commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n\t    if (k2 === undefined) k2 = k;\n\t    var desc = Object.getOwnPropertyDescriptor(m, k);\n\t    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n\t      desc = { enumerable: true, get: function() { return m[k]; } };\n\t    }\n\t    Object.defineProperty(o, k2, desc);\n\t}) : (function(o, m, k, k2) {\n\t    if (k2 === undefined) k2 = k;\n\t    o[k2] = m[k];\n\t}));\n\tvar __setModuleDefault = (commonjsHelpers.commonjsGlobal && commonjsHelpers.commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {\n\t    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n\t}) : function(o, v) {\n\t    o[\"default\"] = v;\n\t});\n\tvar __importStar = (commonjsHelpers.commonjsGlobal && commonjsHelpers.commonjsGlobal.__importStar) || function (mod) {\n\t    if (mod && mod.__esModule) return mod;\n\t    var result = {};\n\t    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\t    __setModuleDefault(result, mod);\n\t    return result;\n\t};\n\tvar __importDefault = (commonjsHelpers.commonjsGlobal && commonjsHelpers.commonjsGlobal.__importDefault) || function (mod) {\n\t    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTMLAttribute = exports.decodeHTML = exports.determineBranch = exports.EntityDecoder = exports.DecodingMode = exports.BinTrieFlags = exports.fromCodePoint = exports.replaceCodePoint = exports.decodeCodePoint = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;\n\tvar decode_data_html_js_1 = __importDefault(require$$0);\n\texports.htmlDecodeTree = decode_data_html_js_1.default;\n\tvar decode_data_xml_js_1 = __importDefault(require$$1);\n\texports.xmlDecodeTree = decode_data_xml_js_1.default;\n\tvar decode_codepoint_js_1 = __importStar(require$$2);\n\texports.decodeCodePoint = decode_codepoint_js_1.default;\n\tvar decode_codepoint_js_2 = require$$2;\n\tObject.defineProperty(exports, \"replaceCodePoint\", { enumerable: true, get: function () { return decode_codepoint_js_2.replaceCodePoint; } });\n\tObject.defineProperty(exports, \"fromCodePoint\", { enumerable: true, get: function () { return decode_codepoint_js_2.fromCodePoint; } });\n\tvar CharCodes;\n\t(function (CharCodes) {\n\t    CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n\t    CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n\t    CharCodes[CharCodes[\"EQUALS\"] = 61] = \"EQUALS\";\n\t    CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n\t    CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n\t    CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n\t    CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n\t    CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n\t    CharCodes[CharCodes[\"LOWER_Z\"] = 122] = \"LOWER_Z\";\n\t    CharCodes[CharCodes[\"UPPER_A\"] = 65] = \"UPPER_A\";\n\t    CharCodes[CharCodes[\"UPPER_F\"] = 70] = \"UPPER_F\";\n\t    CharCodes[CharCodes[\"UPPER_Z\"] = 90] = \"UPPER_Z\";\n\t})(CharCodes || (CharCodes = {}));\n\t/** Bit that needs to be set to convert an upper case ASCII character to lower case */\n\tvar TO_LOWER_BIT = 32;\n\tvar BinTrieFlags;\n\t(function (BinTrieFlags) {\n\t    BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n\t    BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n\t    BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n\t})(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));\n\tfunction isNumber(code) {\n\t    return code >= CharCodes.ZERO && code <= CharCodes.NINE;\n\t}\n\tfunction isHexadecimalCharacter(code) {\n\t    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F) ||\n\t        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F));\n\t}\n\tfunction isAsciiAlphaNumeric(code) {\n\t    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z) ||\n\t        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z) ||\n\t        isNumber(code));\n\t}\n\t/**\n\t * Checks if the given character is a valid end character for an entity in an attribute.\n\t *\n\t * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n\t * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n\t */\n\tfunction isEntityInAttributeInvalidEnd(code) {\n\t    return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);\n\t}\n\tvar EntityDecoderState;\n\t(function (EntityDecoderState) {\n\t    EntityDecoderState[EntityDecoderState[\"EntityStart\"] = 0] = \"EntityStart\";\n\t    EntityDecoderState[EntityDecoderState[\"NumericStart\"] = 1] = \"NumericStart\";\n\t    EntityDecoderState[EntityDecoderState[\"NumericDecimal\"] = 2] = \"NumericDecimal\";\n\t    EntityDecoderState[EntityDecoderState[\"NumericHex\"] = 3] = \"NumericHex\";\n\t    EntityDecoderState[EntityDecoderState[\"NamedEntity\"] = 4] = \"NamedEntity\";\n\t})(EntityDecoderState || (EntityDecoderState = {}));\n\tvar DecodingMode;\n\t(function (DecodingMode) {\n\t    /** Entities in text nodes that can end with any character. */\n\t    DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n\t    /** Only allow entities terminated with a semicolon. */\n\t    DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n\t    /** Entities in attributes have limitations on ending characters. */\n\t    DecodingMode[DecodingMode[\"Attribute\"] = 2] = \"Attribute\";\n\t})(DecodingMode = exports.DecodingMode || (exports.DecodingMode = {}));\n\t/**\n\t * Token decoder with support of writing partial entities.\n\t */\n\tvar EntityDecoder = /** @class */ (function () {\n\t    function EntityDecoder(\n\t    /** The tree used to decode entities. */\n\t    decodeTree, \n\t    /**\n\t     * The function that is called when a codepoint is decoded.\n\t     *\n\t     * For multi-byte named entities, this will be called multiple times,\n\t     * with the second codepoint, and the same `consumed` value.\n\t     *\n\t     * @param codepoint The decoded codepoint.\n\t     * @param consumed The number of bytes consumed by the decoder.\n\t     */\n\t    emitCodePoint, \n\t    /** An object that is used to produce errors. */\n\t    errors) {\n\t        this.decodeTree = decodeTree;\n\t        this.emitCodePoint = emitCodePoint;\n\t        this.errors = errors;\n\t        /** The current state of the decoder. */\n\t        this.state = EntityDecoderState.EntityStart;\n\t        /** Characters that were consumed while parsing an entity. */\n\t        this.consumed = 1;\n\t        /**\n\t         * The result of the entity.\n\t         *\n\t         * Either the result index of a numeric entity, or the codepoint of a\n\t         * numeric entity.\n\t         */\n\t        this.result = 0;\n\t        /** The current index in the decode tree. */\n\t        this.treeIndex = 0;\n\t        /** The number of characters that were consumed in excess. */\n\t        this.excess = 1;\n\t        /** The mode in which the decoder is operating. */\n\t        this.decodeMode = DecodingMode.Strict;\n\t    }\n\t    /** Resets the instance to make it reusable. */\n\t    EntityDecoder.prototype.startEntity = function (decodeMode) {\n\t        this.decodeMode = decodeMode;\n\t        this.state = EntityDecoderState.EntityStart;\n\t        this.result = 0;\n\t        this.treeIndex = 0;\n\t        this.excess = 1;\n\t        this.consumed = 1;\n\t    };\n\t    /**\n\t     * Write an entity to the decoder. This can be called multiple times with partial entities.\n\t     * If the entity is incomplete, the decoder will return -1.\n\t     *\n\t     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the\n\t     * entity is incomplete, and resume when the next string is written.\n\t     *\n\t     * @param string The string containing the entity (or a continuation of the entity).\n\t     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.\n\t     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n\t     */\n\t    EntityDecoder.prototype.write = function (str, offset) {\n\t        switch (this.state) {\n\t            case EntityDecoderState.EntityStart: {\n\t                if (str.charCodeAt(offset) === CharCodes.NUM) {\n\t                    this.state = EntityDecoderState.NumericStart;\n\t                    this.consumed += 1;\n\t                    return this.stateNumericStart(str, offset + 1);\n\t                }\n\t                this.state = EntityDecoderState.NamedEntity;\n\t                return this.stateNamedEntity(str, offset);\n\t            }\n\t            case EntityDecoderState.NumericStart: {\n\t                return this.stateNumericStart(str, offset);\n\t            }\n\t            case EntityDecoderState.NumericDecimal: {\n\t                return this.stateNumericDecimal(str, offset);\n\t            }\n\t            case EntityDecoderState.NumericHex: {\n\t                return this.stateNumericHex(str, offset);\n\t            }\n\t            case EntityDecoderState.NamedEntity: {\n\t                return this.stateNamedEntity(str, offset);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t     * Switches between the numeric decimal and hexadecimal states.\n\t     *\n\t     * Equivalent to the `Numeric character reference state` in the HTML spec.\n\t     *\n\t     * @param str The string containing the entity (or a continuation of the entity).\n\t     * @param offset The current offset.\n\t     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n\t     */\n\t    EntityDecoder.prototype.stateNumericStart = function (str, offset) {\n\t        if (offset >= str.length) {\n\t            return -1;\n\t        }\n\t        if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {\n\t            this.state = EntityDecoderState.NumericHex;\n\t            this.consumed += 1;\n\t            return this.stateNumericHex(str, offset + 1);\n\t        }\n\t        this.state = EntityDecoderState.NumericDecimal;\n\t        return this.stateNumericDecimal(str, offset);\n\t    };\n\t    EntityDecoder.prototype.addToNumericResult = function (str, start, end, base) {\n\t        if (start !== end) {\n\t            var digitCount = end - start;\n\t            this.result =\n\t                this.result * Math.pow(base, digitCount) +\n\t                    parseInt(str.substr(start, digitCount), base);\n\t            this.consumed += digitCount;\n\t        }\n\t    };\n\t    /**\n\t     * Parses a hexadecimal numeric entity.\n\t     *\n\t     * Equivalent to the `Hexademical character reference state` in the HTML spec.\n\t     *\n\t     * @param str The string containing the entity (or a continuation of the entity).\n\t     * @param offset The current offset.\n\t     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n\t     */\n\t    EntityDecoder.prototype.stateNumericHex = function (str, offset) {\n\t        var startIdx = offset;\n\t        while (offset < str.length) {\n\t            var char = str.charCodeAt(offset);\n\t            if (isNumber(char) || isHexadecimalCharacter(char)) {\n\t                offset += 1;\n\t            }\n\t            else {\n\t                this.addToNumericResult(str, startIdx, offset, 16);\n\t                return this.emitNumericEntity(char, 3);\n\t            }\n\t        }\n\t        this.addToNumericResult(str, startIdx, offset, 16);\n\t        return -1;\n\t    };\n\t    /**\n\t     * Parses a decimal numeric entity.\n\t     *\n\t     * Equivalent to the `Decimal character reference state` in the HTML spec.\n\t     *\n\t     * @param str The string containing the entity (or a continuation of the entity).\n\t     * @param offset The current offset.\n\t     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n\t     */\n\t    EntityDecoder.prototype.stateNumericDecimal = function (str, offset) {\n\t        var startIdx = offset;\n\t        while (offset < str.length) {\n\t            var char = str.charCodeAt(offset);\n\t            if (isNumber(char)) {\n\t                offset += 1;\n\t            }\n\t            else {\n\t                this.addToNumericResult(str, startIdx, offset, 10);\n\t                return this.emitNumericEntity(char, 2);\n\t            }\n\t        }\n\t        this.addToNumericResult(str, startIdx, offset, 10);\n\t        return -1;\n\t    };\n\t    /**\n\t     * Validate and emit a numeric entity.\n\t     *\n\t     * Implements the logic from the `Hexademical character reference start\n\t     * state` and `Numeric character reference end state` in the HTML spec.\n\t     *\n\t     * @param lastCp The last code point of the entity. Used to see if the\n\t     *               entity was terminated with a semicolon.\n\t     * @param expectedLength The minimum number of characters that should be\n\t     *                       consumed. Used to validate that at least one digit\n\t     *                       was consumed.\n\t     * @returns The number of characters that were consumed.\n\t     */\n\t    EntityDecoder.prototype.emitNumericEntity = function (lastCp, expectedLength) {\n\t        var _a;\n\t        // Ensure we consumed at least one digit.\n\t        if (this.consumed <= expectedLength) {\n\t            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n\t            return 0;\n\t        }\n\t        // Figure out if this is a legit end of the entity\n\t        if (lastCp === CharCodes.SEMI) {\n\t            this.consumed += 1;\n\t        }\n\t        else if (this.decodeMode === DecodingMode.Strict) {\n\t            return 0;\n\t        }\n\t        this.emitCodePoint((0, decode_codepoint_js_1.replaceCodePoint)(this.result), this.consumed);\n\t        if (this.errors) {\n\t            if (lastCp !== CharCodes.SEMI) {\n\t                this.errors.missingSemicolonAfterCharacterReference();\n\t            }\n\t            this.errors.validateNumericCharacterReference(this.result);\n\t        }\n\t        return this.consumed;\n\t    };\n\t    /**\n\t     * Parses a named entity.\n\t     *\n\t     * Equivalent to the `Named character reference state` in the HTML spec.\n\t     *\n\t     * @param str The string containing the entity (or a continuation of the entity).\n\t     * @param offset The current offset.\n\t     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n\t     */\n\t    EntityDecoder.prototype.stateNamedEntity = function (str, offset) {\n\t        var decodeTree = this.decodeTree;\n\t        var current = decodeTree[this.treeIndex];\n\t        // The mask is the number of bytes of the value, including the current byte.\n\t        var valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n\t        for (; offset < str.length; offset++, this.excess++) {\n\t            var char = str.charCodeAt(offset);\n\t            this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);\n\t            if (this.treeIndex < 0) {\n\t                return this.result === 0 ||\n\t                    // If we are parsing an attribute\n\t                    (this.decodeMode === DecodingMode.Attribute &&\n\t                        // We shouldn't have consumed any characters after the entity,\n\t                        (valueLength === 0 ||\n\t                            // And there should be no invalid characters.\n\t                            isEntityInAttributeInvalidEnd(char)))\n\t                    ? 0\n\t                    : this.emitNotTerminatedNamedEntity();\n\t            }\n\t            current = decodeTree[this.treeIndex];\n\t            valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n\t            // If the branch is a value, store it and continue\n\t            if (valueLength !== 0) {\n\t                // If the entity is terminated by a semicolon, we are done.\n\t                if (char === CharCodes.SEMI) {\n\t                    return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);\n\t                }\n\t                // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.\n\t                if (this.decodeMode !== DecodingMode.Strict) {\n\t                    this.result = this.treeIndex;\n\t                    this.consumed += this.excess;\n\t                    this.excess = 0;\n\t                }\n\t            }\n\t        }\n\t        return -1;\n\t    };\n\t    /**\n\t     * Emit a named entity that was not terminated with a semicolon.\n\t     *\n\t     * @returns The number of characters consumed.\n\t     */\n\t    EntityDecoder.prototype.emitNotTerminatedNamedEntity = function () {\n\t        var _a;\n\t        var _b = this, result = _b.result, decodeTree = _b.decodeTree;\n\t        var valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;\n\t        this.emitNamedEntityData(result, valueLength, this.consumed);\n\t        (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();\n\t        return this.consumed;\n\t    };\n\t    /**\n\t     * Emit a named entity.\n\t     *\n\t     * @param result The index of the entity in the decode tree.\n\t     * @param valueLength The number of bytes in the entity.\n\t     * @param consumed The number of characters consumed.\n\t     *\n\t     * @returns The number of characters consumed.\n\t     */\n\t    EntityDecoder.prototype.emitNamedEntityData = function (result, valueLength, consumed) {\n\t        var decodeTree = this.decodeTree;\n\t        this.emitCodePoint(valueLength === 1\n\t            ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH\n\t            : decodeTree[result + 1], consumed);\n\t        if (valueLength === 3) {\n\t            // For multi-byte values, we need to emit the second byte.\n\t            this.emitCodePoint(decodeTree[result + 2], consumed);\n\t        }\n\t        return consumed;\n\t    };\n\t    /**\n\t     * Signal to the parser that the end of the input was reached.\n\t     *\n\t     * Remaining data will be emitted and relevant errors will be produced.\n\t     *\n\t     * @returns The number of characters consumed.\n\t     */\n\t    EntityDecoder.prototype.end = function () {\n\t        var _a;\n\t        switch (this.state) {\n\t            case EntityDecoderState.NamedEntity: {\n\t                // Emit a named entity if we have one.\n\t                return this.result !== 0 &&\n\t                    (this.decodeMode !== DecodingMode.Attribute ||\n\t                        this.result === this.treeIndex)\n\t                    ? this.emitNotTerminatedNamedEntity()\n\t                    : 0;\n\t            }\n\t            // Otherwise, emit a numeric entity if we have one.\n\t            case EntityDecoderState.NumericDecimal: {\n\t                return this.emitNumericEntity(0, 2);\n\t            }\n\t            case EntityDecoderState.NumericHex: {\n\t                return this.emitNumericEntity(0, 3);\n\t            }\n\t            case EntityDecoderState.NumericStart: {\n\t                (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n\t                return 0;\n\t            }\n\t            case EntityDecoderState.EntityStart: {\n\t                // Return 0 if we have no entity.\n\t                return 0;\n\t            }\n\t        }\n\t    };\n\t    return EntityDecoder;\n\t}());\n\texports.EntityDecoder = EntityDecoder;\n\t/**\n\t * Creates a function that decodes entities in a string.\n\t *\n\t * @param decodeTree The decode tree.\n\t * @returns A function that decodes entities in a string.\n\t */\n\tfunction getDecoder(decodeTree) {\n\t    var ret = \"\";\n\t    var decoder = new EntityDecoder(decodeTree, function (str) { return (ret += (0, decode_codepoint_js_1.fromCodePoint)(str)); });\n\t    return function decodeWithTrie(str, decodeMode) {\n\t        var lastIndex = 0;\n\t        var offset = 0;\n\t        while ((offset = str.indexOf(\"&\", offset)) >= 0) {\n\t            ret += str.slice(lastIndex, offset);\n\t            decoder.startEntity(decodeMode);\n\t            var len = decoder.write(str, \n\t            // Skip the \"&\"\n\t            offset + 1);\n\t            if (len < 0) {\n\t                lastIndex = offset + decoder.end();\n\t                break;\n\t            }\n\t            lastIndex = offset + len;\n\t            // If `len` is 0, skip the current `&` and continue.\n\t            offset = len === 0 ? lastIndex + 1 : lastIndex;\n\t        }\n\t        var result = ret + str.slice(lastIndex);\n\t        // Make sure we don't keep a reference to the final string.\n\t        ret = \"\";\n\t        return result;\n\t    };\n\t}\n\t/**\n\t * Determines the branch of the current node that is taken given the current\n\t * character. This function is used to traverse the trie.\n\t *\n\t * @param decodeTree The trie.\n\t * @param current The current node.\n\t * @param nodeIdx The index right after the current node and its value.\n\t * @param char The current character.\n\t * @returns The index of the next node, or -1 if no branch is taken.\n\t */\n\tfunction determineBranch(decodeTree, current, nodeIdx, char) {\n\t    var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n\t    var jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n\t    // Case 1: Single branch encoded in jump offset\n\t    if (branchCount === 0) {\n\t        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n\t    }\n\t    // Case 2: Multiple branches encoded in jump table\n\t    if (jumpOffset) {\n\t        var value = char - jumpOffset;\n\t        return value < 0 || value >= branchCount\n\t            ? -1\n\t            : decodeTree[nodeIdx + value] - 1;\n\t    }\n\t    // Case 3: Multiple branches encoded in dictionary\n\t    // Binary search for the character.\n\t    var lo = nodeIdx;\n\t    var hi = lo + branchCount - 1;\n\t    while (lo <= hi) {\n\t        var mid = (lo + hi) >>> 1;\n\t        var midVal = decodeTree[mid];\n\t        if (midVal < char) {\n\t            lo = mid + 1;\n\t        }\n\t        else if (midVal > char) {\n\t            hi = mid - 1;\n\t        }\n\t        else {\n\t            return decodeTree[mid + branchCount];\n\t        }\n\t    }\n\t    return -1;\n\t}\n\texports.determineBranch = determineBranch;\n\tvar htmlDecoder = getDecoder(decode_data_html_js_1.default);\n\tvar xmlDecoder = getDecoder(decode_data_xml_js_1.default);\n\t/**\n\t * Decodes an HTML string.\n\t *\n\t * @param str The string to decode.\n\t * @param mode The decoding mode.\n\t * @returns The decoded string.\n\t */\n\tfunction decodeHTML(str, mode) {\n\t    if (mode === void 0) { mode = DecodingMode.Legacy; }\n\t    return htmlDecoder(str, mode);\n\t}\n\texports.decodeHTML = decodeHTML;\n\t/**\n\t * Decodes an HTML string in an attribute.\n\t *\n\t * @param str The string to decode.\n\t * @returns The decoded string.\n\t */\n\tfunction decodeHTMLAttribute(str) {\n\t    return htmlDecoder(str, DecodingMode.Attribute);\n\t}\n\texports.decodeHTMLAttribute = decodeHTMLAttribute;\n\t/**\n\t * Decodes an HTML string, requiring all entities to be terminated by a semicolon.\n\t *\n\t * @param str The string to decode.\n\t * @returns The decoded string.\n\t */\n\tfunction decodeHTMLStrict(str) {\n\t    return htmlDecoder(str, DecodingMode.Strict);\n\t}\n\texports.decodeHTMLStrict = decodeHTMLStrict;\n\t/**\n\t * Decodes an XML string, requiring all entities to be terminated by a semicolon.\n\t *\n\t * @param str The string to decode.\n\t * @returns The decoded string.\n\t */\n\tfunction decodeXML(str) {\n\t    return xmlDecoder(str, DecodingMode.Strict);\n\t}\n\texports.decodeXML = decodeXML;\n\t//# sourceMappingURL=decode.js.map \n} (decode));\n\nexport default /*@__PURE__*/commonjsHelpers.getDefaultExportFromCjs(decode);\nexport { decode as __moduleExports };",
      "start": 1727610130968,
      "end": 1727610131003,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [
          "this"
        ],
        "mappings": "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"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1727610131003,
      "end": 1727610131003,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1727610131003,
      "end": 1727610131003,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1727610131003,
      "end": 1727610131003,
      "order": "post"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1727610131003,
      "end": 1727610131003,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1727610131003,
      "end": 1727610131003,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1727610131003,
      "end": 1727610131003,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1727610131003,
      "end": 1727610131003,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1727610131003,
      "end": 1727610131003,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1727610131003,
      "end": 1727610131003,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1727610131003,
      "end": 1727610131003,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1727610131003,
      "end": 1727610131003,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1727610131003,
      "end": 1727610131003,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1727610131003,
      "end": 1727610131003,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1727610131003,
      "end": 1727610131003,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1727610131003,
      "end": 1727610131003,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1727610131003,
      "end": 1727610131003,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1727610131003,
      "end": 1727610131003,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1727610131003,
      "end": 1727610131003,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1727610131003,
      "end": 1727610131003,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1727610131003,
      "end": 1727610131004,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1727610131004,
      "end": 1727610131004,
      "order": "normal"
    }
  ]
}
